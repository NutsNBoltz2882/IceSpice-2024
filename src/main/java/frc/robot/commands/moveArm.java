// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import java.util.function.DoubleSupplier;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Intake;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class moveArm extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Intake m_intake;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public moveArm(Intake subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_intake = subsystem;
        addRequirements(m_intake);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
public void execute() {
    // Get the current position in degrees
    double currentPos = m_intake.getIntakeEncoderPosition();

    // Print or use the current position as needed
    System.out.println("Intake Current Position (Degrees): " + currentPos);

    // Set the target position to 50 degrees
    double targetPosition = 50.0;

    // Example: Adjust motor speed based on the error between current position and target position
    double error = targetPosition - currentPos;
    double kP = 0.01; // Adjust this proportional constant as needed

    // Example: If the intake is below the target position, move the arm forward
    if (Math.abs(error) > 1.0) { // Check if the error is greater than 1 degree to avoid constant movement
        // Calculate motor speed based on the error
        double motorSpeed = kP * error;

        // Set the motor speed to move the arm
        m_intake.moveArm(motorSpeed);
    } else {
        // Stop the motor if the intake is at or above the target position
        m_intake.stopArm();
    }
    if (Math.abs(error) > 1.0) { // Check if the error is greater than 1 degree to avoid constant movement
        // Calculate motor speed based on the error
        double motorSpeed = kP * error;

        // Set the motor speed to move the arm
        m_intake.moveArm(motorSpeed);

        // Display the current position on SmartDashboard
        SmartDashboard.putNumber("Intake Current Position (Degrees)", currentPos);
    } else {
        // Stop the motor if the intake is at or above the target position
        m_intake.stopArm();

        // Display the current position on SmartDashboard
        SmartDashboard.putNumber("Intake Current Position (Degrees)", currentPos);
    }
}


    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
