package frc.robot.subsystems;


import edu.wpi.first.networktables.GenericEntry;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;

import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkLowLevel.MotorType;

/**
 *
 */
public class IntakeWheels extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double WheelSpeed = 0.0; // Adjusted data type to double
    public static boolean areWheelsSpinning;
    public boolean functionRunning = false; 
    private static boolean DirectionChanged = true;
    private static BooleanSupplier changedDirection = () -> DirectionChanged;// Changed Boolean to boolean
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   public static BooleanSupplier inv = () -> areWheelsSpinning;
    private CANSparkMax wheels;
    private CommandXboxController ttrig;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSupplier Volts = () ->  wheels.getAppliedOutput()*12;
    /**
    *
    */
    public IntakeWheels(CommandXboxController trig) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        wheels = new CANSparkMax(11, MotorType.kBrushless); // Specified motor type
        //addChild("Belt", wheels);
        wheels.setInverted(false);
        ttrig = trig;
       // Shuffleboard.getTab("Intake Wheels").getLayout().
       /*  Shuffleboard.getTab("Intake")
            .add("Intake Position", )
            .withWidget(BuiltInWidgets.kEncoder)
            .withPosition(0, 0)
            .withSize(2, 1);*/
            // DirectionChanged = Shuffleboard.getTab("Intake Wheels").add("Motor Direction Changed", changedDirection).withWidget(BuiltInWidgets.kBooleanBox).getEntry().getBoolean(true);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
       // Shuffleboard.getTab("Intake Wheels").getLayout("Motor Direction Switched").
       if (wheels.getAppliedOutput()>0){
        areWheelsSpinning = true;
       }else{areWheelsSpinning = false;}
      
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
       
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public boolean areWheelsSpinning() {
        if( wheels.getAppliedOutput()==0){
            return true;
        }else{return false;}
        
    }

    public void spinWheels() { // Corrected method name from spinWeheels to spinWheels
        wheels.setVoltage(ttrig.getLeftTriggerAxis()*12);
    }
    public void switchDirection(boolean sw){
        wheels.setInverted(sw);
    }
    public void spin(){
       if( ttrig.getHID().getBButton()){
        wheels.setVoltage(6.0);
       
       }else{wheels.setVoltage(0);}
    }
    public double getOutputVolts(){
       return wheels.getAppliedOutput();
    }
    public DoubleSupplier getVolts(){
        return Volts;
    }
    public static BooleanSupplier getMotorDirection(){
        return changedDirection;
    }
    public BooleanSupplier getInverted(){
        return inv;
    }
    
}
